import React, { useState } from 'react';
import {
  Box,
  Paper,
  Typography,
  Button,
  Chip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  MenuItem,
  FormControl,
  InputLabel,
  Select,
  Grid,
  Tooltip,
  IconButton,
  Stack
} from '@mui/material';
import {
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Info as InfoIcon,
  Warning as WarningIcon,
  CheckCircle as CheckCircleIcon,
  Schedule as ScheduleIcon
} from '@mui/icons-material';

const DentalChart = ({ patientId, treatments = [], onTreatmentUpdate }) => {
  const [selectedTooth, setSelectedTooth] = useState(null);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [treatmentForm, setTreatmentForm] = useState({
    toothNumber: '',
    treatment: '',
    status: 'planned',
    notes: '',
    date: '',
    cost: ''
  });

  // Standard dental chart layout (32 adult teeth)
  const upperTeeth = [
    { number: 1, position: 'UR8' }, { number: 2, position: 'UR7' }, { number: 3, position: 'UR6' },
    { number: 4, position: 'UR5' }, { number: 5, position: 'UR4' }, { number: 6, position: 'UR3' },
    { number: 7, position: 'UR2' }, { number: 8, position: 'UR1' }, { number: 9, position: 'UL1' },
    { number: 10, position: 'UL2' }, { number: 11, position: 'UL3' }, { number: 12, position: 'UL4' },
    { number: 13, position: 'UL5' }, { number: 14, position: 'UL6' }, { number: 15, position: 'UL7' },
    { number: 16, position: 'UL8' }
  ];

  const lowerTeeth = [
    { number: 32, position: 'LR8' }, { number: 31, position: 'LR7' }, { number: 30, position: 'LR6' },
    { number: 29, position: 'LR5' }, { number: 28, position: 'LR4' }, { number: 27, position: 'LR3' },
    { number: 26, position: 'LR2' }, { number: 25, position: 'LR1' }, { number: 24, position: 'LL1' },
    { number: 23, position: 'LL2' }, { number: 22, position: 'LL3' }, { number: 21, position: 'LL4' },
    { number: 20, position: 'LL5' }, { number: 19, position: 'LL6' }, { number: 18, position: 'LL7' },
    { number: 17, position: 'LL8' }
  ];

  const treatmentTypes = [
    'Cleaning',
    'Filling',
    'Crown',
    'Root Canal',
    'Extraction',
    'Implant',
    'Bridge',
    'Veneer',
    'Whitening',
    'Orthodontics',
    'Periodontal Treatment',
    'Other'
  ];

  const getToothTreatments = (toothNumber) => {
    return treatments.filter(t => t.toothNumber === toothNumber);
  };

  const getToothStatus = (toothNumber) => {
    const toothTreatments = getToothTreatments(toothNumber);
    if (toothTreatments.length === 0) return 'healthy';
    
    const hasCompleted = toothTreatments.some(t => t.status === 'completed');
    const hasInProgress = toothTreatments.some(t => t.status === 'in_progress');
    const hasPlanned = toothTreatments.some(t => t.status === 'planned');
    const hasIssue = toothTreatments.some(t => t.status === 'issue');
    
    if (hasIssue) return 'issue';
    if (hasInProgress) return 'in_progress';
    if (hasPlanned) return 'planned';
    if (hasCompleted) return 'completed';
    return 'healthy';
  };

  const getToothColor = (status) => {
    switch (status) {
      case 'healthy': return '#10B981';
      case 'planned': return '#3B82F6';
      case 'in_progress': return '#F59E0B';
      case 'completed': return '#6B7280';
      case 'issue': return '#EF4444';
      default: return '#E5E7EB';
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'completed': return <CheckCircleIcon sx={{ fontSize: 12 }} />;
      case 'in_progress': return <ScheduleIcon sx={{ fontSize: 12 }} />;
      case 'issue': return <WarningIcon sx={{ fontSize: 12 }} />;
      case 'planned': return <InfoIcon sx={{ fontSize: 12 }} />;
      default: return null;
    }
  };

  const handleToothClick = (toothNumber) => {
    setSelectedTooth(toothNumber);
    setTreatmentForm({
      toothNumber: toothNumber.toString(),
      treatment: '',
      status: 'planned',
      notes: '',
      date: '',
      cost: ''
    });
    setDialogOpen(true);
  };

  const handleDialogClose = () => {
    setDialogOpen(false);
    setSelectedTooth(null);
    setTreatmentForm({
      toothNumber: '',
      treatment: '',
      status: 'planned',
      notes: '',
      date: '',
      cost: ''
    });
  };

  const handleFormSubmit = () => {
    if (onTreatmentUpdate) {
      onTreatmentUpdate({
        ...treatmentForm,
        id: Date.now(), // In real app, this would be generated by backend
        toothNumber: parseInt(treatmentForm.toothNumber),
        cost: parseFloat(treatmentForm.cost) || 0
      });
    }
    handleDialogClose();
  };

  const renderTooth = (tooth) => {
    const status = getToothStatus(tooth.number);
    const toothTreatments = getToothTreatments(tooth.number);
    
    return (
      <Tooltip
        key={tooth.number}
        title={
          <Box>
            <Typography variant="subtitle2">Tooth #{tooth.number} ({tooth.position})</Typography>
            {toothTreatments.length > 0 ? (
              <Box sx={{ mt: 1 }}>
                {toothTreatments.map((treatment, index) => (
                  <Typography key={index} variant="caption" display="block">
                    {treatment.treatment} - {treatment.status}
                  </Typography>
                ))}
              </Box>
            ) : (
              <Typography variant="caption">No treatments</Typography>
            )}
          </Box>
        }
        arrow
      >
        <Box
          onClick={() => handleToothClick(tooth.number)}
          sx={{
            width: 40,
            height: 50,
            backgroundColor: getToothColor(status),
            border: '2px solid #FFFFFF',
            borderRadius: '8px 8px 4px 4px',
            cursor: 'pointer',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            position: 'relative',
            transition: 'all 0.2s',
            '&:hover': {
              transform: 'scale(1.1)',
              boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',
              zIndex: 1
            }
          }}
        >
          <Typography
            variant="caption"
            sx={{
              color: '#FFFFFF',
              fontWeight: 600,
              fontSize: '0.7rem'
            }}
          >
            {tooth.number}
          </Typography>
          {status !== 'healthy' && (
            <Box sx={{ position: 'absolute', top: -2, right: -2 }}>
              {getStatusIcon(status)}
            </Box>
          )}
        </Box>
      </Tooltip>
    );
  };

  return (
    <Paper sx={{ p: 3 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h6" component="h2">
          Dental Chart & Treatment Planning
        </Typography>
        <Button
          variant="contained"
          startIcon={<AddIcon />}
          onClick={() => {
            setTreatmentForm({
              toothNumber: '',
              treatment: '',
              status: 'planned',
              notes: '',
              date: '',
              cost: ''
            });
            setDialogOpen(true);
          }}
        >
          Add Treatment
        </Button>
      </Box>

      {/* Legend */}
      <Box sx={{ mb: 3, display: 'flex', flexWrap: 'wrap', gap: 2 }}>
        <Chip
          icon={<Box sx={{ width: 12, height: 12, backgroundColor: '#10B981', borderRadius: '50%' }} />}
          label="Healthy"
          variant="outlined"
          size="small"
        />
        <Chip
          icon={<InfoIcon sx={{ fontSize: 12 }} />}
          label="Planned"
          variant="outlined"
          size="small"
        />
        <Chip
          icon={<ScheduleIcon sx={{ fontSize: 12 }} />}
          label="In Progress"
          variant="outlined"
          size="small"
        />
        <Chip
          icon={<CheckCircleIcon sx={{ fontSize: 12 }} />}
          label="Completed"
          variant="outlined"
          size="small"
        />
        <Chip
          icon={<WarningIcon sx={{ fontSize: 12 }} />}
          label="Issue"
          variant="outlined"
          size="small"
        />
      </Box>

      {/* Dental Chart */}
      <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 3 }}>
        {/* Upper Teeth */}
        <Box>
          <Typography variant="subtitle2" sx={{ textAlign: 'center', mb: 1, color: '#6B7280' }}>
            Upper Jaw
          </Typography>
          <Box sx={{ display: 'flex', gap: 1, justifyContent: 'center' }}>
            {upperTeeth.map(renderTooth)}
          </Box>
        </Box>

        {/* Divider */}
        <Box sx={{ width: '100%', height: 2, backgroundColor: '#E5E7EB', borderRadius: 1 }} />

        {/* Lower Teeth */}
        <Box>
          <Box sx={{ display: 'flex', gap: 1, justifyContent: 'center' }}>
            {lowerTeeth.map(renderTooth)}
          </Box>
          <Typography variant="subtitle2" sx={{ textAlign: 'center', mt: 1, color: '#6B7280' }}>
            Lower Jaw
          </Typography>
        </Box>
      </Box>

      {/* Treatment Dialog */}
      <Dialog open={dialogOpen} onClose={handleDialogClose} maxWidth="sm" fullWidth>
        <DialogTitle>
          {selectedTooth ? `Treatment for Tooth #${selectedTooth}` : 'Add New Treatment'}
        </DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth>
                <InputLabel>Tooth Number</InputLabel>
                <Select
                  value={treatmentForm.toothNumber}
                  label="Tooth Number"
                  onChange={(e) => setTreatmentForm({ ...treatmentForm, toothNumber: e.target.value })}
                >
                  {[...upperTeeth, ...lowerTeeth].map((tooth) => (
                    <MenuItem key={tooth.number} value={tooth.number.toString()}>
                      #{tooth.number} ({tooth.position})
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth>
                <InputLabel>Treatment Type</InputLabel>
                <Select
                  value={treatmentForm.treatment}
                  label="Treatment Type"
                  onChange={(e) => setTreatmentForm({ ...treatmentForm, treatment: e.target.value })}
                >
                  {treatmentTypes.map((type) => (
                    <MenuItem key={type} value={type}>
                      {type}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth>
                <InputLabel>Status</InputLabel>
                <Select
                  value={treatmentForm.status}
                  label="Status"
                  onChange={(e) => setTreatmentForm({ ...treatmentForm, status: e.target.value })}
                >
                  <MenuItem value="planned">Planned</MenuItem>
                  <MenuItem value="in_progress">In Progress</MenuItem>
                  <MenuItem value="completed">Completed</MenuItem>
                  <MenuItem value="issue">Issue</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="Cost (₹)"
                type="number"
                value={treatmentForm.cost}
                onChange={(e) => setTreatmentForm({ ...treatmentForm, cost: e.target.value })}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="Date"
                type="date"
                value={treatmentForm.date}
                onChange={(e) => setTreatmentForm({ ...treatmentForm, date: e.target.value })}
                InputLabelProps={{ shrink: true }}
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Notes"
                multiline
                rows={3}
                value={treatmentForm.notes}
                onChange={(e) => setTreatmentForm({ ...treatmentForm, notes: e.target.value })}
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleDialogClose}>Cancel</Button>
          <Button 
            onClick={handleFormSubmit} 
            variant="contained"
            disabled={!treatmentForm.toothNumber || !treatmentForm.treatment}
          >
            Save Treatment
          </Button>
        </DialogActions>
      </Dialog>

      {/* Treatment Summary */}
      {treatments.length > 0 && (
        <Box sx={{ mt: 4 }}>
          <Typography variant="h6" sx={{ mb: 2 }}>
            Treatment Summary
          </Typography>
          <Grid container spacing={2}>
            {treatments.map((treatment) => (
              <Grid item xs={12} sm={6} md={4} key={treatment.id}>
                <Paper sx={{ p: 2, border: '1px solid #E5E7EB' }}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1 }}>
                    <Typography variant="subtitle2" sx={{ fontWeight: 600 }}>
                      Tooth #{treatment.toothNumber}
                    </Typography>
                    <Chip
                      label={treatment.status}
                      size="small"
                      color={
                        treatment.status === 'completed' ? 'success' :
                        treatment.status === 'in_progress' ? 'warning' :
                        treatment.status === 'issue' ? 'error' : 'primary'
                      }
                    />
                  </Box>
                  <Typography variant="body2" sx={{ mb: 1 }}>
                    {treatment.treatment}
                  </Typography>
                  {treatment.cost > 0 && (
                    <Typography variant="caption" color="text.secondary">
                      Cost: ₹{treatment.cost.toLocaleString()}
                    </Typography>
                  )}
                  {treatment.date && (
                    <Typography variant="caption" color="text.secondary" display="block">
                      Date: {treatment.date}
                    </Typography>
                  )}
                  {treatment.notes && (
                    <Typography variant="caption" color="text.secondary" display="block" sx={{ mt: 1 }}>
                      {treatment.notes}
                    </Typography>
                  )}
                </Paper>
              </Grid>
            ))}
          </Grid>
        </Box>
      )}
    </Paper>
  );
};

export default DentalChart;